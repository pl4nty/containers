name: release

on:
  push:
    branches:
      - main
    paths-ignore:
      - .github/**
      - LICENSE
      - README.md
  workflow_dispatch:
    inputs:
      images:
        description: Image folder names as JSON array
        required: true
        type: string

jobs:
  get-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      images: ${{ steps.folders-condition.outputs.folders }}
    steps:
    - name: Checkout repository
      if: ${{ github.event_name != 'workflow_dispatch' }}
      uses: actions/checkout@v3
      continue-on-error: true # submodules don't seem to inherit the SSH key, so private repos fail
      with:
        fetch-depth: 0
        submodules: true
        ssh-key: ${{ secrets.GIT_SSH_KEY }}

    - name: Get changed files
      if: ${{ github.event_name != 'workflow_dispatch' }}
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        dir_names: true # output folders instead of files
        dir_names_max_depth: 1 # only return roots, not subfolders
        json: true # output in matrix JSON format
        json_raw_format: true
        files_ignore: .github

    - id: folders-condition
      run: echo "folders=${{ github.event_name == 'workflow_dispatch' && inputs.images || steps.changed-files.outputs.all_changed_and_modified_files }}" >> $GITHUB_OUTPUT

  build:
    needs: get-images
    continue-on-error: true # push tags even if some architectures fail
    strategy:
      fail-fast: false # allows visibility of multiarch support
      matrix:
        image: ${{ fromJson(needs.get-images.outputs.images) }}
        os:
        - ubuntu-latest
        - buildjet-2vcpu-ubuntu-2204-arm
        - windows-latest
        include:
        - os: ubuntu-latest
          arch: linux/amd64
        - os: buildjet-2vcpu-ubuntu-2204-arm
          arch: linux/arm64
        - os: windows-latest
          arch: windows/amd64
    runs-on: ${{ matrix.os }}
    permissions:
      packages: write
      contents: read
    outputs:
      tag: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
      arch-tag: ${{ steps.build-push.outputs.tags }}
    steps:
      # required for builds with custom context
      # https://stackoverflow.com/a/52269934
      # can't use github.repositoryUrl - it uses git://, which seems to be blocked on Windows runners
      - name: Checkout image folder
        run: |
          git clone -n --depth=1 --filter=tree:0 ${{ github.server_url }}/${{ github.repository }} ./
          git sparse-checkout set --no-cone ${{ matrix.image }}
          git checkout ${{ github.sha }}
          ls ${{ matrix.image }}

      # - name: Login to GitHub Container Registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ github.token }}

      - name: Generate image tags
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: type=sha

      - name: Init submodule if present, copy patches (Linux)
        id: get-context
        run: |
          cd $IMAGE
          git submodule update --init --recursive $IMAGE
          echo "context=$IMAGE/$IMAGE" >> $GITHUB_OUTPUT

          shopt -s extglob
          cp !($IMAGE) $IMAGE -r
        continue-on-error: true
        env:
          IMAGE: ${{ matrix.image }}

      - name: Copy patches to submodule (Windows)
        if: ${{ startsWith(matrix.arch, 'windows/') }}
        continue-on-error: true
        run: |
          cd ${{ matrix.image }}
          cp * ${{ matrix.image }} -r

      # - uses: docker/setup-buildx-action@v2

      # format labels for build action
      - uses: frabert/replace-string-action@v2
        id: format-labels
        with:
          pattern: '\n'
          string: ${{ steps.meta.outputs.labels }}
          replace-with: '",'
          flags: 'g'
      - uses: frabert/replace-string-action@v2
        id: format-labels-2
        with:
          pattern: '='
          string: ${{ steps.format-labels.outputs.replaced }}
          replace-with: '="'
          flags: 'g'

      # format arch for image tag
      - uses: frabert/replace-string-action@v2
        id: format-labels-tag
        with:
          pattern: '/'
          string: ${{ matrix.arch }}
          replace-with: '-'
          flags: 'g'

      # can we use arch in here? suspect windows images could slow linux down otherwise
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        continue-on-error: true
        with:
          key: docker-layer-cache-{hash}
          restore-keys: |
            docker-layer-cache-
            layer-docker-layer-cache-

      # docker/build-push-action#18 doesn't support Windows
      # this action doesn't have caching though
      - uses: mr-smithers-excellent/docker-build-push@v6
        id: build-push
        with:
          image: ${{ matrix.image }} #
          registry: ghcr.io #
          username: ${{ github.actor }} #
          password: ${{ github.token }} #
          directory: ${{ steps.get-context.outputs.context || matrix.image }} # context:
          dockerfile: ${{ steps.get-context.outputs.context || matrix.image }}/Dockerfile
          # platform: ${{ matrix.arch }}
          tags: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}-${{ steps.format-labels-tag.outputs.replaced }} # ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.format-labels-2.outputs.replaced }}"

  manifest:
    needs:
    - get-images
    - build
    strategy:
      fail-fast: false # allows visibility of multiarch support
      matrix:
        image: ${{ fromJson(needs.get-images.outputs.images) }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
    steps:
    - name: Create and push manifest images
      uses: Noelware/docker-manifest-action@0.3.1
      with:
        inputs: ${{ env.IMAGE }}:${{ needs.build[0].outputs.tag }}
        # TODO helper jq step to clean this up
        images: ${{ env.IMAGE }}:${{ needs.build[0].outputs.arch-tag }},${{ env.IMAGE }}:${{ needs.build[1].outputs.arch-tag }},${{ env.IMAGE }}:${{ needs.build[2].outputs.arch-tag }}
        push: true
