name: Build

on:
  push:
    paths:
      - '*/**'
      - '!.github/**'
      - '!archive/**'
  workflow_dispatch:
    inputs:
      targets:
        description: Target folder names as JSON array
        type: string

jobs:
  targets:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      targets: ${{ github.event_name == 'workflow_dispatch' && inputs.targets || steps.targets.outputs.all_modified_files }}
    steps:
    # fetch-depth may cause issues with multi-commit submodule changes
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 5
        submodules: true
        token: ${{ secrets.GH_PAT }} # private submodules

    - name: Find changed folders
      uses: tj-actions/changed-files@v45.0.7
      id: targets
      with:
        skip_initial_fetch: true
        dir_names: true # output folders instead of files
        dir_names_max_depth: 1 # only return roots, not subfolders
        dir_names_exclude_current_dir: true # exclude root files
        matrix: true
        fetch_additional_submodule_history: true

  main:
    runs-on: windows-2022
    needs: targets
    permissions:
      packages: write # push images
      id-token: write # OIDC artifact signing
    strategy:
      fail-fast: false # allows visibility of failing apps
      matrix:
        target: ${{ fromJson(needs.targets.outputs.targets) }} # TODO bakefile for cache sharing?
    steps:
      # manual checkout to only checkout target submodule
      - name: Checkout
        run: |
          git config --system core.longpaths true
          git config --system core.autocrlf false
          git clone -n --depth=1 --filter=tree:0 ${{ github.server_url }}/${{ github.repository }} ./
          git sparse-checkout set --no-cone ${{ matrix.target }}
          git checkout ${{ github.sha }}
          git config --global --add url."https://oauth2:${{ secrets.GH_PAT }}@github.com/".insteadOf https://github.com/
          git submodule update --init ${{ matrix.target }}

      - name: Add any patches to submodule
        id: context
        working-directory: ${{ matrix.target }}
        # run: |
        #   shopt -s extglob
        #   if [ -d "${{ matrix.target }}" ]; then
        #     cp !(${{ matrix.target }}) ${{ matrix.target }} -r || true
        #     echo "context=${{ matrix.target }}/${{ matrix.target }}" >> $GITHUB_OUTPUT
        #   fi
        #   if [ -f "Dockerfile.windows" ]; then
        #     echo "file=Dockerfile.windows" >> $GITHUB_OUTPUT
        #   fi
        run: |
          if (Test-Path "${{ matrix.target }}") {
            cp * ${{ matrix.target }} -r  -ErrorAction SilentlyContinue
            echo "context=${{ matrix.target }}/${{ matrix.target }}" >> $env:GITHUB_OUTPUT
          }
          if (Test-Path "PLATFORMS") {
            echo "platforms=$(cat PLATFORMS)" >> $env:GITHUB_OUTPUT
          }

      - uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # increase ratelimit
      - uses: docker/login-action@v3.3.0
        with:
          registry: docker.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/metadata-action@v5.6.1
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

        # https://github.com/profnandaa/buildkit/blob/97b80f23f3e55861f70bb7aaf4558340af78d030/docs/windows.md#cni--networking-setup
      - name: Setup CNI
        run: |
          $networkName = 'nat'
          # Get-HnsNetwork is available once you have enabled the 'Hyper-V Host Compute Service' feature
          # which must have been done at the Quick setup above
          # Enable-WindowsOptionalFeature -Online -FeatureName containers -All
          # Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -All
          # the default one named `nat` should be available
          $natInfo = Get-HnsNetwork -ErrorAction Ignore | Where-Object { $_.Name -eq $networkName }
          if ($null -eq $natInfo) {
              throw "NAT network not found, check if you enabled containers, Hyper-V features and restarted the machine"
          }
          $gateway = $natInfo.Subnets[0].GatewayAddress
          $subnet = $natInfo.Subnets[0].AddressPrefix

          $cniConfPath = "$env:ProgramFiles\containerd\cni\conf"
          $cniBinDir = "$env:ProgramFiles\containerd\cni\bin"
          $cniVersion = "0.3.0"

          # get the CNI plugins (binaries)
          mkdir $cniBinDir -Force
          curl.exe -LO https://github.com/microsoft/windows-container-networking/releases/download/v$cniVersion/windows-container-networking-cni-amd64-v$cniVersion.zip
          tar xvf windows-container-networking-cni-amd64-v$cniVersion.zip -C $cniBinDir

          $natConfig = @"
          {
              "cniVersion": "$cniVersion",
              "name": "$networkName",
              "type": "nat",
              "master": "Ethernet",
              "ipam": {
                  "subnet": "$subnet",
                  "routes": [
                      {
                          "gateway": "$gateway"
                      }
                  ]
              },
              "capabilities": {
                  "portMappings": true,
                  "dns": true
              }
          }
          "@
          mkdir $cniConfPath -Force
          Set-Content -Path "$cniConfPath\0-containerd-nat.conf" -Value $natConfig

      - name: Setup containerd
        run: |
          $version = "2.0.2"
          curl.exe -L https://github.com/containerd/containerd/releases/download/v$version/containerd-$version-windows-amd64.tar.gz -o containerd.tar.gz
          tar.exe xvf containerd.tar.gz

          .\bin\containerd.exe --register-service
          Start-Service containerd

      - name: Setup BuildKit
        run: |
          $version = "v0.18.2"
          curl.exe -L https://github.com/moby/buildkit/releases/download/$version/buildkit-$version.windows-amd64.tar.gz -o buildkit.tar.gz
          tar.exe xvf buildkit.tar.gz
          
          .\bin\buildkitd.exe --register-service --containerd-cni-config-path="C:\Program Files\containerd\cni\conf\0-containerd-nat.conf" --containerd-cni-binary-dir="C:\Program Files\containerd\cni\bin"
          Start-Service buildkitd

      - name: Setup Docker Buildx
        run: |
          $version = "v0.19.3"
          curl.exe -L https://github.com/docker/buildx/releases/download/$version/buildx-$version.windows-amd64.exe -o $env:ProgramData\Docker\cli-plugins\docker-buildx.exe

      - name: Setup builders
        run: |
          $version = "0.0.361-089b6dd"
          curl.exe -L https://github.com/pl4nty/containers/releases/download/nsc/nsc_${version}_windows_amd64.tar.gz -o nsc.tar.gz
          tar.exe xvf nsc.tar.gz

          .\nsc.exe auth exchange-github-token --ensure=5m
          .\nsc.exe docker buildx setup --name nsc-remote --use --background

      # - uses: docker/setup-buildx-action@v3.2.0
      #   with:
      #     driver: remote
      #     endpoint: tcp://buildkitd-amd.tplant.com.au:1234
      #     append: |
      #       - endpoint: tcp://buildkitd.tplant.com.au:1234
      #     # - endpoint: npipe:////./pipe/buildkitd
      #   env:
      #     BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ secrets.BUILDKIT_AMD_CA }}
      #     BUILDER_NODE_0_AUTH_TLS_CERT: ${{ secrets.BUILDKIT_AMD_CERT }}
      #     BUILDER_NODE_0_AUTH_TLS_KEY: ${{ secrets.BUILDKIT_AMD_KEY }}
      #     BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ secrets.BUILDKIT_ARM_CA }}
      #     BUILDER_NODE_1_AUTH_TLS_CERT: ${{ secrets.BUILDKIT_ARM_CERT }}
      #     BUILDER_NODE_1_AUTH_TLS_KEY: ${{ secrets.BUILDKIT_ARM_KEY }}

      # - uses: namespacelabs/nscloud-setup@v0
      # - uses: namespacelabs/nscloud-setup-buildx-action@v0
      # - name: Setup BuildKit container
      #   run: |
      #     docker run --privileged --rm -d --name buildkit -p 1234:1234 --security-opt seccomp=unconfined --security-opt apparmor=unconfined moby/buildkit:v0.13.2
      #     docker buildx create --append --name nsc-remote --bootstrap --use docker-container://buildkit

      - uses: docker/build-push-action@v6.13.0
        id: build
        continue-on-error: ${{ contains(steps.context.outputs.platforms, 'windows') }}
        with:
          context: ${{ steps.context.outputs.context || matrix.target }}
          file: ${{ steps.context.outputs.context || matrix.target }}/Dockerfile
          push: true
          platforms: ${{ steps.context.outputs.platforms || 'linux/amd64, linux/arm64' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      # Windows BuildKit still has a lot of bugs, so we only attempt it if cross-compiled build fails
      - if: steps.build.outcome == 'failure'
        run: docker buildx create --append --name nsc-remote npipe:////./pipe/buildkitd --bootstrap
      - uses: docker/build-push-action@v6.13.0
        id: build1
        if: steps.build.outcome == 'failure'
        with:
          context: ${{ steps.context.outputs.context || matrix.target }}
          file: ${{ steps.context.outputs.context || matrix.target }}/Dockerfile
          push: true
          platforms: ${{ steps.context.outputs.platforms || 'linux/amd64, linux/arm64' }}
          cache-from: 'type=gha'
          cache-to: ${{ github.event_name != 'pull_request' && 'type=gha,mode=max' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - uses: sigstore/cosign-installer@v3.8.0
      - name: Sign image manifest
        run: cosign sign --yes "ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}@${{ steps.build.outputs.digest || steps.build1.outputs.digest }}"
