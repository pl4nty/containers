name: Build

on:
  push:
    # branches:
    #   - main
    paths:
      - '*/**'
      - '!.github/**'
      - "!archive/**"
  # pull_request:
  #   paths:
  #     - '*/**'
  #     - '!.*/**'
  #     - "!archive/**"
  merge_group:
  workflow_dispatch:
    inputs:
      targets:
        description: Target folder names as JSON array
        type: string

jobs:
  targets:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      targets: ${{ github.event_name == 'workflow_dispatch' && inputs.targets || steps.targets.outputs.all_modified_files }}
    steps:
    # fetch-depth may cause issues with multi-commit submodule changes
    - uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 5
        submodules: true
        token: ${{ secrets.GH_PAT }} # private submodules

    - name: Find changed folders
      uses: tj-actions/changed-files@v44.5.0
      id: targets
      with:
        skip_initial_fetch: true
        dir_names: true # output folders instead of files
        dir_names_max_depth: 1 # only return roots, not subfolders
        dir_names_exclude_current_dir: true # exclude root files
        matrix: true
        fetch_additional_submodule_history: true

  main:
    runs-on: windows-latest
    needs: targets
    permissions:
      packages: write # push images
      id-token: write # OIDC artifact signing
    strategy:
      fail-fast: false # allows visibility of failing apps
      matrix:
        target: ${{ fromJson(needs.targets.outputs.targets) }} # TODO bakefile for cache sharing?
    steps:
      # for >15GB images, including layers
      - if: ${{ matrix.target == 'kasm-kali-rolling' }}
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true

      # manual checkout to only checkout target submodule
      - name: Checkout
        run: |
          git config --system core.longpaths true
          git config --system core.autocrlf false
          git clone -n --depth=1 --filter=tree:0 ${{ github.server_url }}/${{ github.repository }} ./
          git sparse-checkout set --no-cone ${{ matrix.target }}
          git checkout ${{ github.sha }}
          git config --global --add url."https://oauth2:${{ secrets.GH_PAT }}@github.com/".insteadOf https://github.com/
          git submodule update --init ${{ matrix.target }}

      - name: Add any patches to submodule
        id: context
        working-directory: ${{ matrix.target }}
        # run: |
        #   shopt -s extglob
        #   if [ -d "${{ matrix.target }}" ]; then
        #     cp !(${{ matrix.target }}) ${{ matrix.target }} -r || true
        #     echo "context=${{ matrix.target }}/${{ matrix.target }}" >> $GITHUB_OUTPUT
        #   fi
        #   if [ -f "Dockerfile.windows" ]; then
        #     echo "file=Dockerfile.windows" >> $GITHUB_OUTPUT
        #   fi
        run: |
          if (Test-Path "${{ matrix.target }}") {
            cp * ${{ matrix.target }} -r  -ErrorAction SilentlyContinue
            echo "context=${{ matrix.target }}/${{ matrix.target }}" >> $env:GITHUB_OUTPUT
          }
          if (Test-Path "PLATFORMS") {
            echo "platforms=$(cat PLATFORMS)" >> $env:GITHUB_OUTPUT
          }

      - uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # increase ratelimit
      - uses: docker/login-action@v3.2.0
        with:
          registry: docker.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/metadata-action@v5.5.1
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Setup containerd
        run: |
          $version = "1.7.14"
          curl.exe -L https://github.com/containerd/containerd/releases/download/v$version/containerd-$version-windows-amd64.tar.gz -o containerd.tar.gz
          tar.exe xvf containerd.tar.gz

          .\bin\containerd.exe --register-service
          Start-Service containerd

      - name: Setup BuildKit
        run: |
          $version = "v0.13.2"
          curl.exe -L https://github.com/moby/buildkit/releases/download/$version/buildkit-$version.windows-amd64.tar.gz -o buildkit.tar.gz
          tar.exe xvf buildkit.tar.gz
          
          .\bin\buildkitd.exe --register-service
          Start-Service buildkitd

      - name: Setup Docker Buildx
        run: |
          $version = "v0.14.0"
          curl.exe -L https://github.com/docker/buildx/releases/download/$version/buildx-$version.windows-amd64.exe -o $env:ProgramData\Docker\cli-plugins\docker-buildx.exe

      - name: Setup builders
        run: |
          $version = "0.0.361-089b6dd"
          curl.exe -L https://github.com/pl4nty/containers/releases/download/nsc/nsc_${version}_windows_amd64.tar.gz -o nsc.tar.gz
          tar.exe xvf nsc.tar.gz

          .\nsc.exe auth exchange-github-token --ensure=5m
          .\nsc.exe docker buildx setup --name nsc-remote --use --background

      # - uses: docker/setup-buildx-action@v3.2.0
      #   with:
      #     driver: remote
      #     endpoint: tcp://buildkitd-amd.tplant.com.au:1234
      #     append: |
      #       - endpoint: tcp://buildkitd.tplant.com.au:1234
      #     # - endpoint: npipe:////./pipe/buildkitd
      #   env:
      #     BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ secrets.BUILDKIT_AMD_CA }}
      #     BUILDER_NODE_0_AUTH_TLS_CERT: ${{ secrets.BUILDKIT_AMD_CERT }}
      #     BUILDER_NODE_0_AUTH_TLS_KEY: ${{ secrets.BUILDKIT_AMD_KEY }}
      #     BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ secrets.BUILDKIT_ARM_CA }}
      #     BUILDER_NODE_1_AUTH_TLS_CERT: ${{ secrets.BUILDKIT_ARM_CERT }}
      #     BUILDER_NODE_1_AUTH_TLS_KEY: ${{ secrets.BUILDKIT_ARM_KEY }}

      # - uses: namespacelabs/nscloud-setup@v0
      # - uses: namespacelabs/nscloud-setup-buildx-action@v0
      # - name: Setup BuildKit container
      #   run: |
      #     docker run --privileged --rm -d --name buildkit -p 1234:1234 --security-opt seccomp=unconfined --security-opt apparmor=unconfined moby/buildkit:v0.13.2
      #     docker buildx create --append --name nsc-remote --bootstrap --use docker-container://buildkit

      - uses: docker/build-push-action@v5.4.0
        id: build
        continue-on-error: ${{ contains(steps.context.outputs.platforms, 'windows') }}
        with:
          context: ${{ steps.context.outputs.context || matrix.target }}
          file: ${{ steps.context.outputs.context || matrix.target }}/Dockerfile
          push: true
          platforms: ${{ steps.context.outputs.platforms || 'linux/amd64, linux/arm64' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      # Windows BuildKit still has a lot of bugs, so we only attempt it if cross-compiled build fails
      - if: steps.build.outcome == 'failure'
        run: docker buildx create --append --name nsc-remote npipe:////./pipe/buildkitd --bootstrap
      - uses: docker/build-push-action@v5.4.0
        id: build1
        if: steps.build.outcome == 'failure'
        with:
          context: ${{ steps.context.outputs.context || matrix.target }}
          file: ${{ steps.context.outputs.context || matrix.target }}/Dockerfile
          push: true
          platforms: ${{ steps.context.outputs.platforms || 'linux/amd64, linux/arm64' }}
          cache-from: 'type=gha'
          cache-to: ${{ github.event_name != 'pull_request' && 'type=gha,mode=max' || '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - uses: sigstore/cosign-installer@v3.5.0
      - name: Sign image manifest
        run: cosign sign --yes "ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}@${{ steps.build.outputs.digest || steps.build1.outputs.digest }}"
