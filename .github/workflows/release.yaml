name: release

on:
  merge_group:
  push:
    branches:
      - main
    paths-ignore:
      - ".*/**"
      - "archive/"
  pull_request:
    branches:
      - main
    paths-ignore:
      - ".*/**"
      - "archive/"
  workflow_dispatch:
    inputs:
      targets:
        description: Target folder names as JSON array
        type: string
      targets-windows:
        description: Windows target folder names as JSON array
        type: string

jobs:
  get-targets:
    # changed-files filters aren't sufficient, and runtime filtering is expensive
    env:
      TARGETS_WINDOWS: |
        azure-ad-app-proxy/**
        universal-print-connector/**
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      linux: ${{ steps.targets.outputs.linux }}
      windows: ${{ steps.targets.outputs.windows }}
    steps:
    # fetch-depth may cause issues with multi-commit submodule changes
    - uses: actions/checkout@v3.6.0
      if: ${{ github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch' }}
      with:
        fetch-depth: 2
        submodules: true
        token: ${{ secrets.GH_PAT }} # private submodules

    - name: Linux changes
      uses: tj-actions/changed-files@v38.2.2
      if: ${{ github.event_name != 'workflow_dispatch' }}
      id: changed-files
      with:
        skip_initial_fetch: true
        dir_names: true # output folders instead of files
        dir_names_max_depth: 1 # only return roots, not subfolders
        dir_names_exclude_current_dir: true # exclude root files
        files_ignore: |
          ${{ env.TARGETS_WINDOWS }}
        json: true # output in matrix JSON format

    - name: Windows changes
      uses: tj-actions/changed-files@v38.2.2
      if: ${{ github.event_name != 'workflow_dispatch' }}
      id: changed-files-windows
      with:
        skip_initial_fetch: true
        dir_names: true # output folders instead of files
        dir_names_max_depth: 1 # only return roots, not subfolders
        dir_names_exclude_current_dir: true # exclude root files
        files: |
          ${{ env.TARGETS_WINDOWS }}
        json: true # output in matrix JSON format

    # direct output results in []
    - name: Write output
      id: targets
      run: |
        echo "linux=${{ github.event_name == 'workflow_dispatch' && inputs.targets || steps.changed-files.outputs.all_changed_and_modified_files }}" >> $GITHUB_OUTPUT
        echo "windows=${{ github.event_name == 'workflow_dispatch' && inputs.targets-windows || steps.changed-files-windows.outputs.all_changed_and_modified_files }}" >> $GITHUB_OUTPUT

  build-windows:
    needs: get-targets
    if: ${{ needs.get-targets.outputs.windows && needs.get-targets.outputs.windows != '[]' }}
    permissions:
      packages: write # push images
      id-token: write # OIDC artifact signing
    strategy:
      matrix:
        target: ${{ fromJson(needs.get-targets.outputs.windows) }}
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3.6.0
      with:
        submodules: recursive
        token: ${{ secrets.GH_PAT }} # private submodules

    - name: Add patches to submodule
      id: add-patches
      working-directory: ${{ matrix.target }}
      run: |
        if (Test-Path ${{ matrix.target }}) {
          cp * ${{ matrix.target }} -r  -ErrorAction SilentlyContinue
          echo "context=${{ matrix.target }}/${{ matrix.target }}" >> $env:GITHUB_OUTPUT
        }
        
    - uses: docker/metadata-action@v4.6.0
      id: meta
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}
        sep-tags: ','
        tags: |
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    # errors if cache doesn't exist
    # needs custom restore keys: jpribyl/action-docker-layer-caching#38
    - uses: jpribyl/action-docker-layer-caching@v0.1.1
      continue-on-error: true
      with:
        skip-save: github.event_name == 'pull_request'
        concurrency: 10
        key: docker-layer-cache-${{ matrix.target }}-windows-amd64-{hash}
        restore-keys: |
          docker-layer-cache-${{ matrix.target }}-windows-amd64-
          layer-docker-layer-cache-${{ matrix.target }}-windows-amd64-

    # newline-separated -> comma-separated
    # quote values to allow spaces (eg repo description)
    - name: Format tags and labels
      id: format
      run: |
        "tags=${{ steps.meta.outputs.tags }}" -replace 'ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}:', '' >> $env:GITHUB_OUTPUT
        "labels=" + ("${{ steps.meta.outputs.labels }}" -replace '\n', '",' -replace '=', '="') >> $env:GITHUB_OUTPUT

    - uses: mr-smithers-excellent/docker-build-push@v6.2
      id: build-push
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}
        image: ${{ matrix.target }}
        tags: ${{ steps.format.outputs.tags }}
        labels: ${{ steps.format.outputs.labels }}"
        directory: ${{ steps.add-patches.outputs.context || matrix.target }}
        dockerfile: ${{ steps.add-patches.outputs.context || matrix.target }}\Dockerfile.windows

    # refactor (see Git history) if multi-OS images are needed
    # TODO tags@${{ steps.build-push.outputs.digest }} once implemented upstream
    - uses: sigstore/cosign-installer@v3.1.1
    - name: Sign manifests
      run: |
        "${{ steps.meta.outputs.tags }}" | % { cosign sign --yes $_ }

  build:
    needs: get-targets
    if: ${{ needs.get-targets.outputs.linux && needs.get-targets.outputs.linux != '[]' }}
    permissions:
      packages: write # push images
      id-token: write # OIDC artifact signing
    continue-on-error: true # push tags even if some architectures fail
    strategy:
      fail-fast: false # allows visibility of multiarch support
      matrix:
        target: ${{ fromJson(needs.get-targets.outputs.linux) }}
        os:
        - ubuntu-latest
        - buildjet-2vcpu-ubuntu-2204-arm
        include:
        - os: ubuntu-latest
          arch: linux-amd64
        - os: buildjet-2vcpu-ubuntu-2204-arm
          arch: linux-arm64
    runs-on: ${{ matrix.os }}
    steps:
      # required for builds with custom context
      # https://stackoverflow.com/a/52269934
      # can't use github.repositoryUrl - it uses git://, which seems to be blocked on Windows runners
      - name: Checkout image folder
        run: |
          git clone -n --depth=1 --filter=tree:0 ${{ github.server_url }}/${{ github.repository }} ./
          git sparse-checkout set --no-cone ${{ matrix.target }}
          git checkout ${{ github.sha }}

      - name: Init submodule if present
        id: get-context
        continue-on-error: true # remove once Homebrew/homebrew-cask-fonts#7718 reaches GitHub's runners
        # user.name and changing GITHUB_TOKEN doesn't work, since it defaults to SSH
        run: |
          git config --global --add url."https://oauth2:${{ secrets.GH_PAT }}@github.com/".insteadOf https://github.com/
          git submodule update --init --recursive ${{ matrix.target }}
          if [ -d "${{ matrix.target }}/${{ matrix.target }}" ]; then
            echo "context=${{ matrix.target }}/${{ matrix.target }}" >> $GITHUB_OUTPUT
          fi

      - name: Add patches to submodule
        if: ${{ steps.get-context.outputs.context }}
        continue-on-error: true
        working-directory: ${{ matrix.target }}
        run: |
          shopt -s extglob dotglob
          cp !(${{ matrix.target }}) ${{ matrix.target }} -r

      # increase ratelimit
      - uses: docker/login-action@v2.2.0
        with:
          registry: docker.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - uses: docker/setup-buildx-action@v2.10.0
      - uses: docker/build-push-action@v4.1.1
        with:
          context: ${{ steps.get-context.outputs.context || matrix.target }}
          push: true
          tags: ${{ env.image }}:${{ matrix.arch }}${{ github.event_name == 'pull_request' && format('-pr-{0}', github.event.pull_request.number) || '' }} # TODO sign digests instead
          cache-from: ${{ startsWith(matrix.os, 'buildjet-') && format('type=registry,ref={0}:latest', env.image) || 'type=gha' }}
          cache-to: ${{ startsWith(matrix.os, 'buildjet-') && 'type=inline' || github.event_name != 'pull_request' && 'type=gha,mode=max' || '' }}
          provenance: false # Noelware/docker-manifest-action#131
        env:
          image: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}
          event: ${{ github.event_name }}

  manifest:
    needs:
    - get-targets
    - build
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.get-targets.outputs.linux) }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      # provenance
      id-token: write
      actions: read
    steps:
    - uses: docker/metadata-action@v4.6.0
      id: meta
      with:
        images: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}
        sep-tags: ','
        tags: |
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - uses: docker/login-action@v2.2.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Format build tags
      id: build
      run: echo "tags= linux-amd64, linux-arm64" | sed "s| |ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}:|g" >> $GITHUB_OUTPUT

    - name: Create and push manifests
      id: manifest
      uses: pl4nty/docker-manifest-action@action
      with:
        inputs: ${{ steps.meta.outputs.tags }}
        images: ${{ steps.build.outputs.tags }}
        push: true

    - uses: sigstore/cosign-installer@v3.1.1
    - name: Setup provenance builder
      uses: slsa-framework/slsa-github-generator/.github/actions/generate-builder@v1.9.0
      with:
        repository: slsa-framework/slsa-github-generator
        directory: internal/builders/container
        ref: refs/tags/v1.7.0
        go-version: 1.20
        binary: slsa-generator-container-linux-amd64
        compile-builder: false
        allow-private-repository: false

    - name: Create and sign provenance
      env:
        UNTRUSTED_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: |
        UNTRUSTED_DIGEST=$(echo "${{ steps.manifest.outputs.images }}" | cut -d "," -f1 | cut -d "@" -f2)
        "$GITHUB_WORKSPACE/slsa-generator-container-linux-amd64" generate --predicate=predicate.json
        cosign attest --yes --predicate=predicate.json --type slsaprovenance \
          "${UNTRUSTED_IMAGE}@${UNTRUSTED_DIGEST}"

    - uses: snok/container-retention-policy@v2
      with:
        account-type: personal
        token: ${{ secrets.GH_PAT_DELETE_PACKAGES }}
        image-names: ${{ matrix.target }}
        cut-off: One min ago UTC
        keep-at-least: 3
        skip-tags: latest, linux-*, windows-*, pr-*
